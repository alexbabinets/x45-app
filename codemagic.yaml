workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      groups:
        - apple-connect   # uses APP_STORE_CONNECT_* from your 'apple-connect' group
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 0) Authoritative Capacitor config with the correct bundle id
      - |
        echo "üìù Writing capacitor.config.json at project root"
        cat > capacitor.config.json <<'JSON'
        {
          "appId": "com.expressfitness.x45",
          "appName": "X45 Express Fitness",
          "webDir": "www",
          "bundledWebRuntime": false
        }
        JSON

      # 1) Fresh iOS from that config (guarantees bundle id)
      - |
        echo "üëâ Setting up Capacitor (fresh iOS)"
        npm install -g @capacitor/cli
        npm install @capacitor/core @capacitor/ios --save --no-fund --no-audit || true
        rm -rf ios
        npx cap add ios
        npx cap copy ios
        npx cap sync ios

      # 2) Install CocoaPods (creates/updates .xcworkspace)
      - |
        echo "üì¶ Installing CocoaPods"
        cd ios/App
        pod install --repo-update
        cd ../../

      # 3) Fetch signing files (certs + profiles + export options)
      - |
        echo "üîê Fetching signing files from App Store Connect"
        keychain initialize
        app-store-connect fetch-signing-files "com.expressfitness.x45" --type IOS_APP_STORE --create

      # 4) Resolve the EXACT provisioning profile name + Team ID for our bundle id
      - |
        echo "üîé Resolving Team ID & Provisioning Profile"
        PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        TARGET_BUNDLE="com.expressfitness.x45"
        TEAM_ID=""
        PROFILE_NAME=""
        for f in "$PROFILE_DIR"/*.mobileprovision; do
          /usr/bin/security cms -D -i "$f" > /tmp/profile.plist || true
          APPID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /tmp/profile.plist 2>/dev/null || true)
          NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /tmp/profile.plist 2>/dev/null || true)
          if [[ "$APPID" == *".$TARGET_BUNDLE" ]]; then
            TEAM_ID=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" /tmp/profile.plist 2>/dev/null || true)
            PROFILE_NAME="$NAME"
            echo "‚úÖ Using profile: \"$PROFILE_NAME\"  (Team: $TEAM_ID  AppID: $APPID)"
            break
          fi
        done
        if [ -z "$PROFILE_NAME" ] || [ -z "$TEAM_ID" ]; then
          echo "‚ùå No matching provisioning profile found for $TARGET_BUNDLE"
          ls -la "$PROFILE_DIR" || true
          exit 1
        fi
        # Export for later steps
        echo "CM_TEAM_ID=$TEAM_ID" >> $CM_ENV
        echo "CM_PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV

      # 5) (Optional) show what Xcode thinks before we build
      - |
        echo "üîé Xcode build settings (bundle/team/profile)‚Ä¶"
        xcodebuild -workspace ios/App/App.xcworkspace -scheme App -showBuildSettings | \
          grep -E 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|PROVISIONING_PROFILE_SPECIFIER|CODE_SIGN_STYLE' || true
        echo "üîé Installed profiles:"
        ls -la "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      # 6) Archive with EXPLICIT signing (overrides any project gaps)
      - |
        echo "üèóÔ∏è Archiving with explicit signing"
        ARCHIVE_PATH="$CM_BUILD_DIR/build/ios/xcarchive/App.xcarchive"
        xcodebuild -workspace ios/App/App.xcworkspace \
          -scheme App \
          -destination 'generic/platform=iOS' \
          -archivePath "$ARCHIVE_PATH" archive \
          DEVELOPMENT_TEAM="$CM_TEAM_ID" \
          PROVISIONING_PROFILE_SPECIFIER="$CM_PROFILE_NAME" \
          PRODUCT_BUNDLE_IDENTIFIER="com.expressfitness.x45" \
          CODE_SIGN_STYLE=Manual \
          COMPILER_INDEX_STORE_ENABLE=NO

      # 7) Export IPA using export options created by fetch-signing-files
      - |
        echo "üì¶ Exporting IPA"
        mkdir -p build/ios/ipa
        xcodebuild -exportArchive \
          -archivePath "$CM_BUILD_DIR/build/ios/xcarchive/App.xcarchive" \
          -exportOptionsPlist "$HOME/export_options.plist" \
          -exportPath build/ios/ipa

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
