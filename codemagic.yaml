workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
      groups:
        - apple-connect   # has: APP_STORE_CONNECT_* + CERTIFICATE_PRIVATE_KEY

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Prepare Capacitor iOS (safe to re-run) + ensure Podfile exists FIRST
      - |
        set -euo pipefail
        echo "üëâ Setting up Capacitor (idempotent)"
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        if [ ! -d ios ]; then
          echo "‚ûï Adding iOS platform"
          npx cap add ios
        fi

        # Guarantee we have a Podfile BEFORE anything tries to call pod install
        if [ ! -f ios/App/Podfile ]; then
          echo "üìù Creating Podfile (Capacitor)"
          printf '%s\n' \
            'require_relative "../../node_modules/@capacitor/ios/scripts/pods_helpers"' \
            '' \
            'platform :ios, "13.0"' \
            'use_frameworks!' \
            '' \
            'target "App" do' \
            '  capacitor_pods' \
            'end' > ios/App/Podfile
        fi

        # Update native assets
        npx cap copy ios
        npx cap sync ios || true  # sync sometimes tries pod install; we handle pods below explicitly

      # 2) CocoaPods (creates workspace if missing)
      - |
        set -euo pipefail
        echo "üì¶ Installing CocoaPods"
        cd ios/App
        pod install --repo-update
        cd ../../
        ls -la ios/App

      # 3) Fetch signing files and apply them to workspace/scheme
      - |
        set -euo pipefail
        echo "üîê Fetching & applying signing profiles"
        keychain initialize

        # Uses your RSA private key (CERTIFICATE_PRIVATE_KEY) to create/renew the distribution cert if needed
        app-store-connect fetch-signing-files "$BUNDLE_ID" \
          --type IOS_APP_STORE \
          --create \
          --certificate-private-key "$CERTIFICATE_PRIVATE_KEY"

        keychain add-certificates

        xcode-project use-profiles \
          --workspace ios/App/App.xcworkspace \
          --scheme App

      # 4) Build signed IPA (Release)
      - |
        set -euo pipefail
        echo "üèóÔ∏è Archiving & exporting IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination generic/platform=iOS"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - a
