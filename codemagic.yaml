workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
        APP_NAME: X45
      groups:
        - apple-connect

    triggering:
      events: [push]
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Ensure Capacitor project exists and write a minimal Podfile (no heredocs)
      - |
        set -euo pipefail

        echo "üëâ Install Capacitor tooling & deps"
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        echo "üß≠ Repo contents (top level):"
        ls -la

        # Ensure www exists for cap add ios
        mkdir -p www
        [ -f www/index.html ] || echo "<!doctype html><title>X45</title><div>X45</div>" > www/index.html

        # Ensure capacitor.config.json exists and matches env
        node -e "const fs=require('fs');const p='capacitor.config.json';let cfg={appId:process.env.BUNDLE_ID||'com.expressfitness.x45',appName:process.env.APP_NAME||'X45',webDir:'www',bundledWebRuntime:false};if(fs.existsSync(p)){try{const cur=JSON.parse(fs.readFileSync(p,'utf8'));cfg={...cfg,...cur}}catch(e){}}if(process.env.BUNDLE_ID)cfg.appId=process.env.BUNDLE_ID;if(process.env.APP_NAME)cfg.appName=process.env.APP_NAME;fs.writeFileSync(p,JSON.stringify(cfg,null,2));console.log('capacitor.config.json ->',cfg);"

        # Create package.json if missing (safety)
        [ -f package.json ] || npm init -y

        # Add iOS if project not present
        if [ ! -d ios/App/App.xcodeproj ]; then
          echo "‚ûï Adding iOS platform"
          npx cap init "${APP_NAME:-X45}" "${BUNDLE_ID:-com.expressfitness.x45}" --web-dir=www --no-interactive || true
          npx cap add ios || true
        else
          echo "‚úÖ Found ios/App/App.xcodeproj"
        fi

        # Sync native assets
        npx cap copy ios
        npx cap sync ios || true

        # Minimal Podfile pointing to App.xcodeproj
        echo "üìù Writing Podfile"
        rm -f ios/App/Podfile
        printf "platform :ios, '13.0'\n" >> ios/App/Podfile
        printf "use_frameworks! :linkage => :static\n" >> ios/App/Podfile
        printf "project 'App.xcodeproj'\n\n" >> ios/App/Podfile
        printf "target 'App' do\n" >> ios/App/Podfile
        printf "  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n" >> ios/App/Podfile
        printf "  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n" >> ios/App/Podfile
        printf "end\n" >> ios/App/Podfile

        echo "üìÑ Podfile:"
        nl -ba ios/App/Podfile

      # 2) Clean + install CocoaPods
      - |
        set -euo pipefail
        echo "üßπ Reset Pods"
        cd ios/App
        rm -f Podfile.lock
        rm -rf Pods
        pod repo update
        echo "üì¶ pod install --repo-update"
        pod install --repo-update
        cd ../../
        ls -la ios/App

      # 3) Fetch signing and apply profiles
      - |
        set -euo pipefail
        echo "üîê Fetching & applying signing profiles"
        keychain initialize
        app-store-connect fetch-signing-files "$BUNDLE_ID" \
          --type IOS_APP_STORE \
          --create \
          --certificate-private-key "$CERTIFICATE_PRIVATE_KEY"
        keychain add-certificates
        xcode-project use-profiles \
          --workspace ios/App/App.xcworkspace \
          --scheme App

      # 4) Build signed IPA
      - |
        set -euo pipefail
        echo "üèóÔ∏è Archiving & exporting IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination generic/platform=iOS"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
