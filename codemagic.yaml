workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      groups:
        - apple-connect   # uses APP_STORE_CONNECT_* you added
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 0) Authoritative Capacitor config at repo root
      - |
        echo "📝 Writing capacitor.config.json at project root"
        cat > capacitor.config.json <<'JSON'
        {
          "appId": "com.expressfitness.x45",
          "appName": "X45 Express Fitness",
          "webDir": "www",
          "bundledWebRuntime": false
        }
        JSON

      # 1) Fresh iOS from Capacitor config (guarantees correct bundle id)
      - |
        echo "👉 Setting up Capacitor (fresh iOS)"
        npm install -g @capacitor/cli
        npm install @capacitor/core @capacitor/ios --save --no-fund --no-audit || true
        rm -rf ios
        npx cap add ios
        npx cap copy ios
        npx cap sync ios

      # 2) Install CocoaPods (creates/updates .xcworkspace)
      - |
        echo "📦 Installing CocoaPods"
        cd ios/App
        pod install --repo-update
        cd ../../

      # 3) Belt & suspenders: force PRODUCT_BUNDLE_IDENTIFIER in pbxproj
      - |
        echo "🪛 Forcing PRODUCT_BUNDLE_IDENTIFIER in project.pbxproj"
        BUNDLE_ID="com.expressfitness.x45"
        PBXPROJ="ios/App/App.xcodeproj/project.pbxproj"
        /usr/bin/sed -i '' -E "s/(PRODUCT_BUNDLE_IDENTIFIER = )[A-Za-z0-9._-]+;/\1${BUNDLE_ID};/g" "${PBXPROJ}"

      # 4) Fetch signing files and APPLY them to the specific Xcode project
      - |
        echo "🔐 Fetching & applying signing profiles"
        keychain initialize
        app-store-connect fetch-signing-files "com.expressfitness.x45" --type IOS_APP_STORE --create
        # Patch THIS project explicitly so the App target gets a profile
        xcode-project use-profiles --project ios/App/App.xcodeproj

      # 5) Show what Xcode will use (debug prints help if something fails)
      - |
        echo "🔎 Build settings (key signing vars):"
        xcodebuild -workspace ios/App/App.xcworkspace -scheme App -showBuildSettings | \
          grep -E 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|PROVISIONING_PROFILE_SPECIFIER|CODE_SIGN_STYLE' || true
        echo "🔎 Profiles on disk:"
        ls -la "$HOME/Library/MobileDevice/Provisioning Profiles" || true
        echo "🔎 pbxproj signing snippets:"
        grep -E 'PRODUCT_BUNDLE_IDENTIFIER|PROVISIONING_PROFILE_SPECIFIER|DEVELOPMENT_TEAM' -n ios/App/App.xcodeproj/project.pbxproj || true

      # 6) Build signed IPA (workspace + export options from use-profiles)
      - |
        echo "🏗️ Building signed IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination 'generic/platform=iOS'" \
          --export-options-plist=$HOME/export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
