workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
      # This imports the env vars you created in Codemagic:
      #   APP_STORE_CONNECT_KEY_IDENTIFIER
      #   APP_STORE_CONNECT_ISSUER_ID
      #   APP_STORE_CONNECT_PRIVATE_KEY
      #   CERTIFICATE_PRIVATE_KEY     (your RSA 2048 PEM)
      groups:
        - apple-connect

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Prepare Capacitor iOS (safe to re-run) + ensure CocoaPods workspace
      - |
        echo "👉 Setting up Capacitor (idempotent)"
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        # Add iOS platform once; keep existing projects intact
        if [ ! -d ios ]; then
          npx cap add ios
        fi

        # Always refresh native assets
        npx cap copy ios
        npx cap sync ios

        # Create a minimal Podfile if it's missing
        if [ ! -f ios/App/Podfile ]; then
          echo "📝 Creating Podfile for Capacitor"
          cat > ios/App/Podfile <<'PODFILE'
          require_relative "../../node_modules/@capacitor/ios/scripts/pods_helpers"

          platform :ios, '13.0'
          use_frameworks!

          target 'App' do
            capacitor_pods
            # Add extra pods here if you need them
          end
          PODFILE
        fi

        echo "📦 Running CocoaPods"
        cd ios/App
        pod install --repo-update
        cd ../../

      # 2) Fetch signing files and apply them to the workspace + scheme
      - |
        echo "🔐 Fetching & applying signing profiles"
        keychain initialize

        # Uses the RSA private key you stored in CERTIFICATE_PRIVATE_KEY (PEM)
        app-store-connect fetch-signing-files "$BUNDLE_ID" \
          --type IOS_APP_STORE \
          --create \
          --certificate-private-key "$CERTIFICATE_PRIVATE_KEY"

        keychain add-certificates

        # Attach the fetched provisioning profile(s) to your workspace/scheme
        xcode-project use-profiles \
          --workspace ios/App/App.xcworkspace \
          --scheme App

      # 3) Build a signed IPA (workspace + scheme)
      - |
        echo "🏗️ Archiving & exporting IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination generic/platform=iOS"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
