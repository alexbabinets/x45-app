workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
      groups:
        - apple-connect   # APP_STORE_CONNECT_* + CERTIFICATE_PRIVATE_KEY must be in this env group

    triggering:
      events: [push]
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Prepare Capacitor iOS, then write a *minimal* Podfile that targets App.xcodeproj (no helpers, no post_install)
      - |
        set -euo pipefail
        echo "üëâ Setting up Capacitor"
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        if [ ! -d ios ]; then
          echo "‚ûï Adding iOS platform"
          npx cap add ios
        fi

        echo "üìù Writing minimal Podfile"
        rm -f ios/App/Podfile

        # Verify the Xcode project exists; print what we find if not
        if [ ! -d ios/App/App.xcodeproj ]; then
          echo "‚ùå ios/App/App.xcodeproj not found. Available projects under ios/:"
          find ios -maxdepth 2 -name "*.xcodeproj" -print || true
        fi

        # Write a tiny Podfile line-by-line to avoid heredoc corruption on CI
        printf "platform :ios, '13.0'\n" >> ios/App/Podfile
        printf "use_frameworks! :linkage => :static\n" >> ios/App/Podfile
        printf "project 'App.xcodeproj'\n\n" >> ios/App/Podfile
        printf "target 'App' do\n" >> ios/App/Podfile
        printf "  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n" >> ios/App/Podfile
        printf "  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n" >> ios/App/Podfile
        # --- If you use Capacitor plugins, add them explicitly here, e.g.: ---
        # printf \"  pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'\\n\" >> ios/App/Podfile
        # printf \"  pod 'CapacitorStatusBar',   :path => '../../node_modules/@capacitor/status-bar'\\n\"      >> ios/App/Podfile
        # ---------------------------------------------------------------------
        printf "end\n" >> ios/App/Podfile

        echo "üîé Podfile:"
        nl -ba ios/App/Podfile

        echo "üîÑ Sync native"
        npx cap copy ios
        npx cap sync ios || true

      # 2) Clean Pods defensively and install
      - |
        set -euo pipefail
        echo "üßπ CocoaPods cleanup"
        cd ios/App
        rm -f Podfile.lock
        rm -rf Pods
        pod repo update
        echo "üì¶ Installing CocoaPods"
        pod install --repo-update
        cd ../../
        ls -la ios/App

      # 3) Fetch signing files and apply them
      - |
        set -euo pipefail
        echo "üîê Fetching & applying signing profiles"
        keychain initialize

        app-store-connect fetch-signing-files "$BUNDLE_ID" \
          --type IOS_APP_STORE \
          --create \
          --certificate-private-key "$CERTIFICATE_PRIVATE_KEY"

        keychain add-certificates

        xcode-project use-profiles \
          --workspace ios/App/App.xcworkspace \
          --scheme App

      # 4) Build signed IPA (Release)
      - |
        set -euo pipefail
        echo "üèóÔ∏è Archiving & exporting IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination generic/platform=iOS"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
