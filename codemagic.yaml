workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      groups:
        - apple-connect   # uses your APP_STORE_CONNECT_* vars
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Prepare Capacitor iOS
      - |
        echo "üëâ Setting up Capacitor"
        npm install -g @capacitor/cli
        npm install @capacitor/core @capacitor/ios --save --no-fund --no-audit || true
        npx cap init "X45 Express Fitness" "com.expressfitness.x45" --web-dir=www --npm-client=npm || true
        # Add iOS if missing (first-time)
        if [ ! -d ios ]; then
          npx cap add ios
        fi
        npx cap copy ios
        npx cap sync ios

      # 2) Install CocoaPods (creates .xcworkspace)
      - |
        echo "üì¶ Installing CocoaPods"
        cd ios/App
        pod install --repo-update
        cd ../../

      # 3) Ensure the Xcode project bundle id matches what we sign for
      - |
        echo "üîé Checking bundle identifier"
        EXPECTED_BUNDLE_ID="com.expressfitness.x45"
        CURRENT_BUNDLE_ID=$(xcodebuild -workspace ios/App/App.xcworkspace -scheme App -showBuildSettings 2>/dev/null | grep -m1 PRODUCT_BUNDLE_IDENTIFIER | awk '{print $3}')
        echo "Current PRODUCT_BUNDLE_IDENTIFIER: ${CURRENT_BUNDLE_ID}"
        if [ -z "$CURRENT_BUNDLE_ID" ] || [ "$CURRENT_BUNDLE_ID" != "$EXPECTED_BUNDLE_ID" ]; then
          echo "‚ö†Ô∏è Bundle id mismatch. Recreating iOS platform with ${EXPECTED_BUNDLE_ID}"
          rm -rf ios
          npx cap add ios
          npx cap copy ios
          npx cap sync ios
          cd ios/App && pod install --repo-update && cd ../../
        fi

      # 4) Fetch signing files and apply to the project
      - |
        echo "üîê Fetching & applying signing profiles"
        keychain initialize
        app-store-connect fetch-signing-files "com.expressfitness.x45" --type IOS_APP_STORE --create
        cd ios/App
        xcode-project use-profiles
        cd ../../

      # 5) Build signed IPA (workspace + export options)
      - |
        echo "üèóÔ∏è Building signed IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination 'generic/platform=iOS'" \
          --export-options-plist=$HOME/export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
