workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
      groups:
        - apple-connect   # APP_STORE_CONNECT_* + CERTIFICATE_PRIVATE_KEY

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Prepare Capacitor iOS + write a resilient Podfile
      - |
        set -euo pipefail
        echo "üëâ Setting up Capacitor (idempotent)"
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        if [ ! -d ios ]; then
          echo "‚ûï Adding iOS platform"
          npx cap add ios
        fi

        echo "üìù Writing Podfile (resilient to missing pods_helpers)"
        cat > ios/App/Podfile <<'__PODFILE__'
        helper_path = File.expand_path('../../node_modules/@capacitor/ios/scripts/pods_helpers', __FILE__)
        begin
          require helper_path
        rescue LoadError
          # Fallback definitions if pods_helpers can't be required (CI/paths)
          def capacitor_pods
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
          end
          def assertDeploymentTarget(installer); end
        end

        platform :ios, '13.0'
        use_frameworks! :linkage => :static

        target 'App' do
          capacitor_pods
          # Add Capacitor plugins here if needed, e.g.:
          # pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'
          # pod 'CapacitorHaptics',  :path => '../../node_modules/@capacitor/haptics'
        end

        post_install do |installer|
          assertDeploymentTarget(installer) if defined?(assertDeploymentTarget)
        end
        __PODFILE__

        echo "üîé Ruby syntax check for Podfile"
        ruby -c ios/App/Podfile

        echo "üîÑ Syncing native assets"
        npx cap copy ios
        npx cap sync ios || true

      # 2) CocoaPods (creates workspace if missing)
      - |
        set -euo pipefail
        echo "üì¶ Installing CocoaPods"
        cd ios/App
        pod install --repo-update
        cd ../../
        ls -la ios/App

      # 3) Fetch signing files and apply them to workspace/scheme
      - |
        set -euo pipefail
        echo "üîê Fetching & applying signing profiles"
        keychain initialize

        app-store-connect fetch-signing-files "$BUNDLE_ID" \
          --type IOS_APP_STORE \
          --create \
          --certificate-private-key "$CERTIFICATE_PRIVATE_KEY"

        keychain add-certificates

        xcode-project use-profiles \
          --workspace ios/App/App.xcworkspace \
          --scheme App

      # 4) Build signed IPA (Release)
      - |
        set -euo pipefail
        echo "üèóÔ∏è Archiving & exporting IPA"
        xcode-project build-ipa \
          --workspace ios/App/App.xcworkspace \
          --scheme App \
          --archive-flags="-destination generic/platform=iOS"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
