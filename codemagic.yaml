workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
        APP_NAME: X45
      groups:
        - apple-connect

    triggering:
      events: [push]
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Clean + recreate Capacitor iOS (iOS 15) and Podfile
      - |
        set -euo pipefail
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        [ -f package.json ] || npm init -y
        mkdir -p www
        [ -f www/index.html ] || echo "<!doctype html><meta charset='utf-8'><title>X45</title><div>X45</div>" > www/index.html

        node -e "const fs=require('fs');fs.writeFileSync('capacitor.config.json',JSON.stringify({appId:'${BUNDLE_ID}',appName:'${APP_NAME}',webDir:'www',bundledWebRuntime:false},null,2))"

        rm -rf ios
        npx cap init "${APP_NAME}" "${BUNDLE_ID}" --web-dir=www --no-interactive || true
        npx cap add ios
        npx cap copy ios
        npx cap sync ios || true

        test -d ios/App/App.xcodeproj || (echo 'Missing ios/App/App.xcodeproj' && exit 1)

        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 15.0" ios/App/App/Info.plist || true

        rm -f ios/App/Podfile
        {
          printf "platform :ios, '15.0'\n"
          printf "use_frameworks! :linkage => :static\n"
          printf "project 'App.xcodeproj'\n\n"
          printf "target 'App' do\n"
          printf "  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n"
          printf "  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n"
          printf "end\n"
        } >> ios/App/Podfile

      # 2) CocoaPods
      - |
        set -euo pipefail
        cd ios/App
        rm -f Podfile.lock
        rm -rf Pods
        pod repo update
        pod install --repo-update
        cd ../../

      # 3) Fetch signing files (no extra flags), apply to project, archive, export
      - |
        set -euo pipefail

        keychain initialize
        app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
        keychain add-certificates

        # Apply profiles to the Xcode project (no --scheme flag)
        xcode-project use-profiles --project ios/App/App.xcodeproj

        # Find fetched App Store profile name & team from the installed profile
        PROFILE_PATH="$(ls -t /Users/builder/Library/MobileDevice/Provisioning\ Profiles/IOS_APP_STORE_*.mobileprovision | head -n1)"
        [ -f "$PROFILE_PATH" ] || (echo "No IOS_APP_STORE profile found"; ls -la /Users/builder/Library/MobileDevice/Provisioning\ Profiles/; exit 1)
        TMP_PLIST="$(mktemp)"; /usr/bin/security cms -D -i "$PROFILE_PATH" > "$TMP_PLIST"
        PROFILE_NAME="$(/usr/libexec/PlistBuddy -c 'Print :Name' "$TMP_PLIST")"
        TEAM_ID="$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "$TMP_PLIST")"

        # Archive (workspace because of Pods)
        mkdir -p build/ios
        xcodebuild \
          -workspace ios/App/App.xcworkspace \
          -scheme App \
          -configuration Release \
          -archivePath build/ios/App.xcarchive \
          -destination "generic/platform=iOS" \
          clean archive

        # Export using the exact fetched profile name
        cat > build/ios/ExportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key><string>app-store</string>
          <key>signingStyle</key><string>manual</string>
          <key>teamID</key><string>${TEAM_ID}</string>
          <key>provisioningProfiles</key>
          <dict>
            <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
          </dict>
          <key>stripSwiftSymbols</key><true/>
          <key>compileBitcode</key><false/>
          <key>uploadBitcode</key><false/>
        </dict>
        </plist>
        EOF

        xcodebuild -exportArchive \
          -archivePath build/ios/App.xcarchive \
          -exportOptionsPlist build/ios/ExportOptions.plist \
          -exportPath build/ios/ipa

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/**/*.xcarchive
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
