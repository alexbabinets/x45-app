workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: 16.4
      vars:
        BUNDLE_ID: com.expressfitness.x45
        APP_NAME: X45
        TEAM_ID: X42964UG6Q
      groups:
        - apple-connect

    triggering:
      events: [push]
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Clean + recreate Capacitor iOS and Podfile
      - |
        set -euo pipefail
        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true
        [ -f package.json ] || npm init -y
        mkdir -p www
        [ -f www/index.html ] || echo "<!doctype html><meta charset='utf-8'><title>X45</title><div>X45</div>" > www/index.html
        node -e "const fs=require('fs');fs.writeFileSync('capacitor.config.json',JSON.stringify({appId:'${BUNDLE_ID}',appName:'${APP_NAME}',webDir:'www',bundledWebRuntime:false},null,2))"
        rm -rf ios
        npx cap init "${APP_NAME}" "${BUNDLE_ID}" --web-dir=www --no-interactive || true
        npx cap add ios
        npx cap copy ios
        npx cap sync ios || true
        test -d ios/App/App.xcodeproj || (echo "Missing ios/App/App.xcodeproj" && exit 1)
        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 15.0" ios/App/App/Info.plist || true
        rm -f ios/App/Podfile
        {
          printf "platform :ios, '15.0'\n"
          printf "use_frameworks! :linkage => :static\n"
          printf "project 'App.xcodeproj'\n\n"
          printf "target 'App' do\n"
          printf "  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n"
          printf "  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n"
          printf "end\n"
        } >> ios/App/Podfile

      # 2) CocoaPods
      - |
        set -euo pipefail
        cd ios/App
        rm -f Podfile.lock
        rm -rf Pods
        pod repo update
        pod install --repo-update || (echo "Pod install failed" && exit 1)
        cd ../../

      # 3) Fetch certs/profiles
      - |
        set -euo pipefail
        keychain initialize
        security list-keychains
        app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create || (echo "Failed to fetch signing files" && exit 1)
        security find-identity -v -p codesigning
        keychain add-certificates

      # 4) Archive & export with automatic signing
      - |
        set -euo pipefail
        mkdir -p build/ios
        cat > build/ios/ExportOptions_auto.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0"><dict>
          <key>method</key><string>app-store</string>
          <key>signingStyle</key><string>automatic</string>
          <key>teamID</key><string>${TEAM_ID}</string>
          <key>stripSwiftSymbols</key><true/>
          <key>compileBitcode</key><false/>
          <key>uploadBitcode</key><false/>
        </dict></plist>
        EOF

        echo "TEAM_ID: $TEAM_ID"
        echo "BUNDLE_ID: $BUNDLE_ID"
        xcodebuild \
          -workspace ios/App/App.xcworkspace \
          -scheme App \
          -configuration Release \
          -archivePath build/ios/App.xcarchive \
          -destination "generic/platform=iOS" \
          -allowProvisioningUpdates \
          clean archive \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM="${TEAM_ID}" \
          PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID}"

        xcodebuild -exportArchive \
          -archivePath build/ios/App.xcarchive \
          -exportOptionsPlist build/ios/ExportOptions_auto.plist \
          -exportPath build/ios/ipa \
          -allowProvisioningUpdates

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/**/*.xcarchive
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - alexbabinets@gmail.com
        notify:
          success: true
          failure: true
