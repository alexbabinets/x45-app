workflows:
  ios-capacitor:
    name: X45 iOS (Capacitor)
    environment:
      xcode: latest
      vars:
        BUNDLE_ID: com.expressfitness.x45
        APP_NAME: X45
      groups:
        - apple-connect   # must contain: APP_STORE_CONNECT_ISSUER_ID / APP_STORE_CONNECT_KEY_IDENTIFIER / APP_STORE_CONNECT_PRIVATE_KEY

    triggering:
      events: [push]
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # 1) Create clean Capacitor iOS project (iOS 15) + deterministic Podfile
      - |
        set -euo pipefail

        npm i -g @capacitor/cli
        npm i @capacitor/core @capacitor/ios --save --no-fund --no-audit || true

        [ -f package.json ] || npm init -y
        mkdir -p www
        [ -f www/index.html ] || echo "<!doctype html><meta charset='utf-8'><title>X45</title><div>X45</div>" > www/index.html

        node -e "const fs=require('fs');fs.writeFileSync('capacitor.config.json',JSON.stringify({appId:'${BUNDLE_ID}',appName:'${APP_NAME}',webDir:'www',bundledWebRuntime:false},null,2))"

        rm -rf ios
        npx cap init "${APP_NAME}" "${BUNDLE_ID}" --web-dir=www --no-interactive || true
        npx cap add ios
        npx cap copy ios
        npx cap sync ios || true

        test -d ios/App/App.xcodeproj || (echo 'Missing ios/App/App.xcodeproj' && exit 1)

        # iOS 15 minimum for the app
        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 15.0" ios/App/App/Info.plist || true

        # Full Podfile (forces all pods to iOS 15 + Swift 5.9 to avoid mismatches)
        rm -f ios/App/Podfile
        cat > ios/App/Podfile <<'PODFILE'
        platform :ios, '15.0'
        use_frameworks! :linkage => :static
        project 'App.xcodeproj'

        target 'App' do
          pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
          pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
        end

        post_install do |installer|
          installer.generated_projects.each do |project|
            project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
                config.build_settings['SWIFT_VERSION'] = '5.9'
              end
            end
          end
        end
        PODFILE

      # 2) CocoaPods
      - |
        set -euo pipefail
        cd ios/App
        rm -f Podfile.lock
        rm -rf Pods
        pod repo update
        pod install --repo-update
        cd ../../

      # 3) Fetch signing files, import, and apply to the Xcode project
      - |
        set -euo pipefail
        keychain initialize
        app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
        keychain add-certificates
        xcode-project use-profiles --project ios/App/App.xcodeproj

      # 4) Bump build number and persist it for following steps
      - |
        set -euo pipefail
        BUILD_NUM="${BUILD_NUMBER:-${CM_BUILD_ID:-$(date +%Y%m%d%H%M)}}"
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BUILD_NUM}" ios/App/App/Info.plist || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${BUILD_NUM}" ios/App/App/Info.plist
        /usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" ios/App/App/Info.plist >/dev/null 2>&1 || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string 1.0.0" ios/App/App/Info.plist
        echo "export BUILD_NUM=${BUILD_NUM}" >> "$CM_ENV"

      # 5) Archive & export IPA
      - |
        set -euo pipefail
        : "${BUILD_NUM:=${CM_BUILD_ID:-$(date +%Y%m%d%H%M)}}"

        mkdir -p build/ios
        xcodebuild \
          -workspace ios/App/App.xcworkspace \
          -scheme App \
          -configuration Release \
          -archivePath build/ios/App.xcarchive \
          -destination "generic/platform=iOS" \
          clean archive \
          CURRENT_PROJECT_VERSION="${BUILD_NUM}"

        PROFILE_PATH="$(ls -t "$HOME/Library/MobileDevice/Provisioning Profiles"/IOS_APP_STORE_*.mobileprovision | head -n1)"
        [ -f "$PROFILE_PATH" ] || (echo "No IOS_APP_STORE profile found"; ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/"; exit 1)
        TMP_PLIST="$(mktemp)"; /usr/bin/security cms -D -i "$PROFILE_PATH" > "$TMP_PLIST"
        TEAM_ID="$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "$TMP_PLIST")"
        PROFILE_NAME="$(/usr/libexec/PlistBuddy -c 'Print :Name' "$TMP_PLIST")"

        cat > build/ios/ExportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key><string>app-store</string>
          <key>signingStyle</key><string>manual</string>
          <key>teamID</key><string>${TEAM_ID}</string>
          <key>provisioningProfiles</key>
          <dict>
            <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
          </dict>
          <key>stripSwiftSymbols</key><true/>
          <key>compileBitcode</key><false/>
          <key>uploadBitcode</key><false/>
        </dict>
        </plist>
        EOF

        xcodebuild -exportArchive \
          -archivePath build/ios/App.xcarchive \
          -exportOptionsPlist build/ios/ExportOptions.plist \
          -exportPath build/ios/ipa

      # 6) Upload to TestFlight (no post-processing dependency)
      - |
        set -euo pipefail
        IPA_PATH="$(ls -t build/ios/ipa/*.ipa | head -n1)"
        echo "ðŸš€ Uploading to TestFlight: $IPA_PATH"
        app-store-connect publish \
          --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
          --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
          --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
          --path "$IPA_PATH" \
          --testflight

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/**/*.xcarchive
      - ios/App/build/**/*.log
      - ~/Library/Logs/gym/*.log
